// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id               Int             @id @default(autoincrement())
//   name             String
//   email            String          @unique
//   password         String
//   profilePicture   String? // Optional
//   bio              String? // Optional
//   location         String? // Optional
//   skills           Skill[] // One-to-many relation with skills
//   bookings         Booking[] // One-to-many relation with bookings
//   messagesSent     Message[]       @relation("SentMessages")
//   messagesReceived Message[]       @relation("ReceivedMessages")
//   reviews          Review[] // One-to-many relation with reviews
//   bookmarks        Bookmark[] // One-to-many relation with bookmarks
//   skillExchanges   SkillExchange[] // One-to-many relation with skill exchanges
//   chatRoomsAsUser1 ChatRoom[]      @relation("User1ChatRooms")
//   chatRoomsAsUser2 ChatRoom[]      @relation("User2ChatRooms")
// }

// // Skills Table: Information about skills users can offer
// model Skill {
//   id                    Int             @id @default(autoincrement())
//   name                  String
//   category              String
//   description           String
//   image                 String?
//   duration              String
//   location              String
//   availability          String
//   skillWantedInReturn   String
//   userId                Int
//   user                  User            @relation(fields: [userId], references: [id])
//   bookings              Booking[] // One-to-many relation with bookings
//   reviews               Review[] // One-to-many relation with reviews
//   bookmarks             Bookmark[] // One-to-many relation with bookmarks
//   offeredSkillExchanges SkillExchange[] @relation("OfferedSkills") // Added inverse relation
//   wantedSkillExchanges  SkillExchange[] @relation("WantedSkills") // Added inverse relation
// }

// // Bookings Table: Information about skill exchange bookings
// model Booking {
//   id      Int      @id @default(autoincrement())
//   userId  Int // Foreign Key to User table
//   skillId Int // Foreign Key to Skill table
//   date    DateTime // Date of the booking
//   time    DateTime // Time of the booking
//   status  String // Pending, Confirmed, Cancelled
//   user    User     @relation(fields: [userId], references: [id])
//   skill   Skill    @relation(fields: [skillId], references: [id])
// }

// model Message {
//   id         Int      @id @default(autoincrement())
//   roomId     Int
//   senderId   Int
//   receiverId Int
//   message    String
//   timestamp  DateTime @default(now())
//   room       ChatRoom @relation(fields: [roomId], references: [id])
//   sender     User     @relation("SentMessages", fields: [senderId], references: [id])
//   receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
// }

// model ChatRoom {
//   id       Int       @id @default(autoincrement())
//   user1    User      @relation("User1ChatRooms", fields: [user1Id], references: [id])
//   user1Id  Int
//   user2    User      @relation("User2ChatRooms", fields: [user2Id], references: [id])
//   user2Id  Int
//   messages Message[]

//   @@unique([user1Id, user2Id])
// }

// // Reviews Table: Reviews given by users after completing a skill exchange
// model Review {
//   id      Int    @id @default(autoincrement())
//   userId  Int // Foreign Key to User table (reviewer)
//   skillId Int // Foreign Key to Skill table (the skill being reviewed)
//   rating  Int // Rating value (1-5 stars)
//   review  String // Review content
//   user    User   @relation(fields: [userId], references: [id])
//   skill   Skill  @relation(fields: [skillId], references: [id])
// }

// // Bookmarks Table: Users' saved or bookmarked skills
// model Bookmark {
//   id      Int   @id @default(autoincrement())
//   userId  Int // Foreign Key to User table
//   skillId Int // Foreign Key to Skill table
//   user    User  @relation(fields: [userId], references: [id])
//   skill   Skill @relation(fields: [skillId], references: [id])
// }

// // SkillExchange Table (Optional): Relationships between skills offered and skills wanted in return
// model SkillExchange {
//   id             Int    @id @default(autoincrement())
//   userId         Int // Foreign Key to User table
//   skillOfferedId Int // Foreign Key to Skill table (skill being offered)
//   skillWantedId  Int // Foreign Key to Skill table (skill being wanted in return)
//   status         String // Pending, Matched, Completed
//   user           User   @relation(fields: [userId], references: [id])
//   skillOffered   Skill  @relation("OfferedSkills", fields: [skillOfferedId], references: [id])
//   skillWanted    Skill  @relation("WantedSkills", fields: [skillWantedId], references: [id])
// }

// ------------------------------------------------------------------------


// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }



// model User {
//   id               Int             @id @default(autoincrement())
//   name             String
//   email            String          @unique
//   password         String
//   profilePicture   String?
//   bio              String?
//   location         String?
//   skill            Skill?          // One-to-one relation
//   bookingsSent     Booking[]       @relation("BookingUser")
//   bookingsReceived Booking[]       @relation("BookingReceiver")
//   messagesSent     Message[]       @relation("SentMessages")
//   messagesReceived Message[]       @relation("ReceivedMessages")
//   reviews          Review[]
//   bookmarks        Bookmark[]
//   skillExchanges   SkillExchange[]
//   chatRoomsAsUser1 ChatRoom[]      @relation("User1ChatRooms")
//   chatRoomsAsUser2 ChatRoom[]      @relation("User2ChatRooms")
// }




// model Skill {
//   id               Int      @id @default(autoincrement())
//   skillsOffered    String[] // Array of skills the user can teach
//   skillsWanted     String[] // Array of skills the user wants to learn
//   category         String?
//   description      String?
//   image            String?
//   duration         String?
//   location         String?
//   availability     Json?
//   userId           Int      @unique // One-to-one with User
//   user             User     @relation(fields: [userId], references: [id])
//   bookings         Booking[]
//   reviews          Review[]
//   bookmarks        Bookmark[]
//   offeredExchanges SkillExchange[] @relation("OfferedSkills")
//   wantedExchanges  SkillExchange[] @relation("WantedSkills")
// }



// model Booking {
//   id               Int      @id @default(autoincrement())
//   userId           Int
//   receiverId       Int
//   skillId          Int
//   date             DateTime
//   time             DateTime
//   status           String
//   skillOfferedName String
//   skillWantedName  String
//   message          String?
//   user             User     @relation("BookingUser", fields: [userId], references: [id])
//   receiver         User     @relation("BookingReceiver", fields: [receiverId], references: [id])
//   skill            Skill    @relation(fields: [skillId], references: [id])
// }


// model Message {
//   id         Int      @id @default(autoincrement())
//   roomId     Int
//   senderId   Int
//   receiverId Int
//   message    String
//   timestamp  DateTime @default(now())
//   room       ChatRoom @relation(fields: [roomId], references: [id])
//   sender     User     @relation("SentMessages", fields: [senderId], references: [id])
//   receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
// }

// model ChatRoom {
//   id       Int       @id @default(autoincrement())
//   user1    User      @relation("User1ChatRooms", fields: [user1Id], references: [id])
//   user1Id  Int
//   user2    User      @relation("User2ChatRooms", fields: [user2Id], references: [id])
//   user2Id  Int
//   messages Message[]

//   @@unique([user1Id, user2Id])
// }

// model Review {
//   id      Int    @id @default(autoincrement())
//   userId  Int
//   skillId Int
//   rating  Int
//   review  String
//   user    User   @relation(fields: [userId], references: [id])
//   skill   Skill  @relation(fields: [skillId], references: [id])
// }

// model Bookmark {
//   id      Int   @id @default(autoincrement())
//   userId  Int
//   skillId Int
//   user    User  @relation(fields: [userId], references: [id])
//   skill   Skill @relation(fields: [skillId], references: [id])
// }

// model SkillExchange {
//   id             Int    @id @default(autoincrement())
//   userId         Int
//   skillOfferedId Int
//   skillWantedId  Int
//   status         String
//   user           User   @relation(fields: [userId], references: [id])
//   skillOffered   Skill  @relation("OfferedSkills", fields: [skillOfferedId], references: [id])
//   skillWanted    Skill  @relation("WantedSkills", fields: [skillWantedId], references: [id])
// }




// ---------------------------------------------------------------------------------


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  name             String
  email            String          @unique
  password         String
  profilePicture   String?
  bio              String?
  location         String?

  dummyField String? @default("temp") // just to trigger a migration

  
  skill            Skill?          // One-to-one relation
  bookingsSent     Booking[]       @relation("BookingUser")
  bookingsReceived Booking[]       @relation("BookingReceiver")
  messagesSent     Message[]       @relation("SentMessages")
  messagesReceived Message[]       @relation("ReceivedMessages")


  // reviews          Review[]
  bookmarks        Bookmark[]
  skillExchanges   SkillExchange[]
  chatRoomsAsUser1 ChatRoom[]      @relation("User1ChatRooms")
  chatRoomsAsUser2 ChatRoom[]      @relation("User2ChatRooms")
  notifications Notification[]

  Review Review[] @relation("ReviewsGiven")

  ReviewsReceived Review[] @relation("ReviewsReceived")
}

model Skill {
  id               Int      @id @default(autoincrement())
  skillsOffered    String[] // Array of skills the user can teach
  skillsWanted     String[] // Array of skills the user wants to learn
  category         String?
  description      String?
  image            String?
  duration         String?
  location         String?
  availability     Json?
  userId           Int      @unique // One-to-one with User
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings         Booking[]
  reviews          Review[]
  bookmarks        Bookmark[]
  offeredExchanges SkillExchange[] @relation("OfferedSkills")
  wantedExchanges  SkillExchange[] @relation("WantedSkills")
}

model Booking {
  id               Int      @id @default(autoincrement())
  userId           Int
  receiverId       Int
  skillId          Int
  date             DateTime
  time             DateTime
  status           String
  skillOfferedName String
  skillWantedName  String
  message          String?
  user             User     @relation("BookingUser", fields: [userId], references: [id], onDelete: Cascade)
  receiver         User    @relation("BookingReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  skill            Skill    @relation(fields: [skillId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  roomId     Int
  senderId   Int
  receiverId Int
  message    String
  timestamp  DateTime @default(now())
  room       ChatRoom @relation(fields: [roomId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id       Int       @id @default(autoincrement())
  user1    User      @relation("User1ChatRooms", fields: [user1Id], references: [id], onDelete: Cascade)
  user1Id  Int
  user2    User      @relation("User2ChatRooms", fields: [user2Id], references: [id], onDelete: Cascade)
  user2Id  Int
  messages Message[]

  @@unique([user1Id, user2Id])
}


model Review {
  id          Int    @id @default(autoincrement())
  userId      Int    // Reviewer
  skillId     Int    // Skill being reviewed
  receiverId  Int    // Owner of the skill

  rating      Int
  review      String
  createdAt   DateTime @default(now()) // ✅ New field

  user        User   @relation("ReviewsGiven", fields: [userId], references: [id], onDelete: Cascade)
  receiver    User   @relation("ReviewsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  skill       Skill  @relation(fields: [skillId], references: [id])
}



model Bookmark {
  id      Int   @id @default(autoincrement())
  userId  Int
  skillId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill   Skill @relation(fields: [skillId], references: [id])
}

model SkillExchange {
  id             Int    @id @default(autoincrement())
  userId         Int
  skillOfferedId Int
  skillWantedId  Int
  status         String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillOffered   Skill  @relation("OfferedSkills", fields: [skillOfferedId], references: [id])
  skillWanted    Skill  @relation("WantedSkills", fields: [skillWantedId], references: [id])
}


model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   // e.g., "booking", "message", "review"
  content   String   // short message like "Your booking was confirmed"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}








// model Review {
//   id      Int    @id @default(autoincrement())
//   userId  Int
//   skillId Int
//   rating  Int
//   review  String
//   user    User   @relation(fields: [userId], references: [id])
//   skill   Skill  @relation(fields: [skillId], references: [id])
// }







// model User {
//   id               Int             @id @default(autoincrement())
//   name             String
//   email            String          @unique
//   password         String
//   profilePicture   String?
//   bio              String?
//   location         String?
//   skill            Skill?          // One-to-one relation (one user, one skill row)
//   bookings         Booking[]
//   messagesSent     Message[]       @relation("SentMessages")
//   messagesReceived Message[]       @relation("ReceivedMessages")
//   reviews          Review[]
//   bookmarks        Bookmark[]
//   skillExchanges   SkillExchange[]
//   chatRoomsAsUser1 ChatRoom[]      @relation("User1ChatRooms")
//   chatRoomsAsUser2 ChatRoom[]      @relation("User2ChatRooms")

//   BookingsSent Booking[] @relation("BookingUser")

//   BookingsRecieved Booking[] @relation("BookingReceiver")
// }







// model Booking {
//   id      Int      @id @default(autoincrement())
//   userId  Int
//   skillId Int
//   date    DateTime
//   time    DateTime
//   status  String
//   user    User     @relation(fields: [userId], references: [id])
//   skill   Skill    @relation(fields: [skillId], references: [id])
// }















// Users Table: Store user-related information
// model User {
//   id               Int             @id @default(autoincrement())
//   name             String
//   email            String          @unique
//   password         String
//   profilePicture   String? // Optional
//   bio              String? // Optional
//   location         String? // Optional
//   skills           Skill[] // One-to-many relation with skills
//   bookings         Booking[] // One-to-many relation with bookings
//   messagesSent     Message[]       @relation("SentMessages")
//   messagesReceived Message[]       @relation("ReceivedMessages")
//   reviews          Review[] // One-to-many relation with reviews
//   bookmarks        Bookmark[] // One-to-many relation with bookmarks
//   skillExchanges   SkillExchange[] // One-to-many relation with skill exchanges (added here)
//   chatRoomsAsUser1 ChatRoom[]      @relation("User1ChatRooms")
//   chatRoomsAsUser2 ChatRoom[]      @relation("User2ChatRooms")
// }

// Messages Table: Information about messages between users
// model Message {
//   id         Int      @id @default(autoincrement())
//   senderId   Int // Foreign Key to User table (sender)
//   receiverId Int // Foreign Key to User table (receiver)
//   message    String
//   timestamp  DateTime @default(now())
//   sender     User     @relation("SentMessages", fields: [senderId], references: [id])
//   receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
// }
