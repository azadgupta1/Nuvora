generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  name             String
  email            String          @unique
  password         String
  profilePicture   String?
  bio              String?
  location         String?

  dummyField String? @default("temp") // just to trigger a migration

  
  skill            Skill?          // One-to-one relation
  bookingsSent     Booking[]       @relation("BookingUser")
  bookingsReceived Booking[]       @relation("BookingReceiver")
  messagesSent     Message[]       @relation("SentMessages")
  messagesReceived Message[]       @relation("ReceivedMessages")


  // reviews          Review[]
  bookmarks        Bookmark[]
  skillExchanges   SkillExchange[]
  chatRoomsAsUser1 ChatRoom[]      @relation("User1ChatRooms")
  chatRoomsAsUser2 ChatRoom[]      @relation("User2ChatRooms")
  notifications Notification[]

  Review Review[] @relation("ReviewsGiven")

  ReviewsReceived Review[] @relation("ReviewsReceived")
}

model Skill {
  id               Int      @id @default(autoincrement())
  skillsOffered    String[] // Array of skills the user can teach
  skillsWanted     String[] // Array of skills the user wants to learn
  category         String?
  description      String?
  image            String?
  duration         String?
  location         String?
  availability     Json?
  userId           Int      @unique // One-to-one with User
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings         Booking[]
  reviews          Review[]
  bookmarks        Bookmark[]
  offeredExchanges SkillExchange[] @relation("OfferedSkills")
  wantedExchanges  SkillExchange[] @relation("WantedSkills")
}

model Booking {
  id               Int      @id @default(autoincrement())
  userId           Int
  receiverId       Int
  skillId          Int
  date             DateTime
  time             DateTime
  status           String
  skillOfferedName String
  skillWantedName  String
  message          String?
  user             User     @relation("BookingUser", fields: [userId], references: [id], onDelete: Cascade)
  receiver         User    @relation("BookingReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  skill            Skill    @relation(fields: [skillId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  roomId     Int
  senderId   Int
  receiverId Int
  message    String
  timestamp  DateTime @default(now())
  room       ChatRoom @relation(fields: [roomId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id       Int       @id @default(autoincrement())
  user1    User      @relation("User1ChatRooms", fields: [user1Id], references: [id], onDelete: Cascade)
  user1Id  Int
  user2    User      @relation("User2ChatRooms", fields: [user2Id], references: [id], onDelete: Cascade)
  user2Id  Int
  messages Message[]

  @@unique([user1Id, user2Id])
}


model Review {
  id          Int    @id @default(autoincrement())
  userId      Int    // Reviewer
  skillId     Int    // Skill being reviewed
  receiverId  Int    // Owner of the skill

  rating      Int
  review      String
  createdAt   DateTime @default(now()) // âœ… New field

  user        User   @relation("ReviewsGiven", fields: [userId], references: [id], onDelete: Cascade)
  receiver    User   @relation("ReviewsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  skill       Skill  @relation(fields: [skillId], references: [id])
}



model Bookmark {
  id      Int   @id @default(autoincrement())
  userId  Int
  skillId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill   Skill @relation(fields: [skillId], references: [id])
}

model SkillExchange {
  id             Int    @id @default(autoincrement())
  userId         Int
  skillOfferedId Int
  skillWantedId  Int
  status         String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillOffered   Skill  @relation("OfferedSkills", fields: [skillOfferedId], references: [id])
  skillWanted    Skill  @relation("WantedSkills", fields: [skillWantedId], references: [id])
}


model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   // e.g., "booking", "message", "review"
  content   String   // short message like "Your booking was confirmed"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
